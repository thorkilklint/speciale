## Rensning af variablen for antal års erhvervserfaring (1998-2015) 
Vi renser det indhentede data, så vi får en erhvervserfaringsvariabel
```{r, eval=FALSE}
#Splittet ft-data ved <br>
erhv_list_scrape<-(str_split(df98_15$erhv_bio,
  "<br>"))

# Erstattet -78 med -1978 i arkivdata
df98_15$erhv_bio2<-str_replace_all(df98_15$erhv_bio2, "\\-(?=[34567890][1234567890])", "-19")

#Splittet arkivdata ved ". [Versal]" eller ved "og i"
erhv_list_scrape2<- str_split(df98_15$erhv_bio2,
  "\\.(?=[:space:][:upper:])| og i| og på|\\, ved| og (?=[:digit:][:digit:])|\\, udlånt|\\, fuldmægtig|\\, (?=[:digit:][:digit:])|\\, lektor|\\, sygeplejerske| og Amtsskatte|\\, økonomichef|\\, i samme kommune|\\, medarbejder i | og ved|\\, jurist|\\, vikar|\\, direktør|\\, selvstændig ejendomsmægler|\\, uddannelsesleder|\\, adm\\.| og GASA| samt adm|\\, højskolelærer|\\, overtog\\, for A\\-pressen")

#Enkelte på denne liste skal splittes andet sted
erhv_list_scrape2[377][[1]] <- unlist(str_split(erhv_list_scrape2[377][1], "\\,"))
erhv_list_scrape2[453][[1]] <- c(erhv_list_scrape2[[453]][[1]][1], erhv_list_scrape2[[453]][[1]][1], unlist(str_split(erhv_list_scrape2[453][[1]][3], "\\,")))

indeks<-(1:length(df98_15$erhv_bio))[is.na(df98_15$erhv_bio)]

#Saml de to lister
for (i in indeks){
  erhv_list_scrape[[i]]<-erhv_list_scrape2[[i]]
}
```

### Udregner mål for antal års erhvervserfaring
I det følgende udregner vi folketingsmedlemmernes antal års erhvervserfaring. Dette har vi to forskellige mål for:

* Mål nr. 1: Antal års erhvervserfaring - alene med medlemmer der angiver start- og sluttidspunkt
* Mål nr. 2: Antal års erhvervserfaring - medlemmer uden sluttidspunkt tildeles første indmeldelse i stedet

### Mål nr 1: Simpel fratrukket overlap for perioder med start og slut
Vi laver et simpelt mål for, hvor længe medlemmet har været i beskæftigelse. Først laver vi en liste med erhv-starttidspunkt.
```{r, eval=FALSE}
erhv_list_starttid <- erhv_list_scrape
for(i in 1:length(erhv_list_starttid)){
  erhv_list_starttid[[i]] <- str_extract(erhv_list_starttid[[i]],"[:digit:]{4}") # Tager første fire cifre
}
```

Og så en liste med erhv-sluttidspunkt
```{r, eval=FALSE}
erhv_list_sluttid <- erhv_list_scrape
for(i in 1:length(erhv_list_sluttid)){
  erhv_list_sluttid[[i]] <- str_extract(erhv_list_scrape[[i]],"(?<=[:digit:]{4}.{1,10})[:digit:]{4}") # Tager første fire cifre
}
```

Vi laver erhvervsvariable, hvor erhv_1 angiver nyeste stilling, erhv_2 angiver næstnyeste og såfremdeles
```{r, eval=FALSE}
#Erhvervserfaring
max(lengths(erhv_list_scrape))

# 
for(i in 1:nrow(df98_15)){
  df98_15$erhv_01_start[i] <- erhv_list_starttid[[i]][1]
  df98_15$erhv_01_slut[i] <- erhv_list_sluttid[[i]][1]
  
  df98_15$erhv_02_start[i] <- erhv_list_starttid[[i]][2]
  df98_15$erhv_02_slut[i] <- erhv_list_sluttid[[i]][2]
  
  df98_15$erhv_03_start[i] <- erhv_list_starttid[[i]][3]
  df98_15$erhv_03_slut[i] <- erhv_list_sluttid[[i]][3]
  
  df98_15$erhv_04_start[i] <- erhv_list_starttid[[i]][4]
  df98_15$erhv_04_slut[i] <- erhv_list_sluttid[[i]][4]
  
  df98_15$erhv_05_start[i] <- erhv_list_starttid[[i]][5]
  df98_15$erhv_05_slut[i] <- erhv_list_sluttid[[i]][5]
  
  df98_15$erhv_06_start[i] <- erhv_list_starttid[[i]][6]
  df98_15$erhv_06_slut[i] <- erhv_list_sluttid[[i]][6]
  
  df98_15$erhv_07_start[i] <- erhv_list_starttid[[i]][7]
  df98_15$erhv_07_slut[i] <- erhv_list_sluttid[[i]][7]
  
  df98_15$erhv_08_start[i] <- erhv_list_starttid[[i]][8]
  df98_15$erhv_08_slut[i] <- erhv_list_sluttid[[i]][8]
  
  df98_15$erhv_09_start[i] <- erhv_list_starttid[[i]][9]
  df98_15$erhv_09_slut[i] <- erhv_list_sluttid[[i]][9]
  
  df98_15$erhv_10_start[i] <- erhv_list_starttid[[i]][10]
  df98_15$erhv_10_slut[i] <- erhv_list_sluttid[[i]][10]
}
```

En udfordring er hvis nogle folketingsmedlemmer har lavet "dobbelt-jobbing". Dvs. har medlemmet haft to jobs samtidig tæller det med andre ord dobbelt. Derfor fjerner vi eventuelle overlap mellem perioderne og udregner antal års erhvervserfaring.
```{r, eval=FALSE}
overlap_list<-vector("list", length = nrow(df98_15))

df98_15$indeks<-1:nrow(df98_15)


for (i in df98_15$indeks[!is.na(df98_15$erhv_01_start)&!is.na(df98_15$erhv_01_slut)]){
  overlap_list[[i]]<-seq(as.numeric(df98_15$erhv_01_start)[i],as.numeric(df98_15$erhv_01_slut)[i])
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_02_start)&!is.na(df98_15$erhv_02_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_02_start)[i],as.numeric(df98_15$erhv_02_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_03_start)&!is.na(df98_15$erhv_03_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_03_start)[i],as.numeric(df98_15$erhv_03_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_04_start)&!is.na(df98_15$erhv_04_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_04_start)[i],as.numeric(df98_15$erhv_04_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_05_start)&!is.na(df98_15$erhv_05_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_05_start)[i],as.numeric(df98_15$erhv_05_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_06_start)&!is.na(df98_15$erhv_06_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_06_start)[i],as.numeric(df98_15$erhv_06_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_07_start)&!is.na(df98_15$erhv_07_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_07_start)[i],as.numeric(df98_15$erhv_07_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_08_start)&!is.na(df98_15$erhv_08_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_08_start)[i],as.numeric(df98_15$erhv_08_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_09_start)&!is.na(df98_15$erhv_09_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_09_start)[i],as.numeric(df98_15$erhv_09_slut)[i]))
}

for (i in df98_15$indeks[!is.na(df98_15$erhv_10_start)&!is.na(df98_15$erhv_19_slut)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15$erhv_10_start)[i],as.numeric(df98_15$erhv_10_slut)[i]))
}
#Laver en vector
aar_med_erfaring<-NA

for (i in 1:length(overlap_list)){
  aar_med_erfaring[i]<-length(unique(overlap_list[[i]]))
}
```

Vi ser at nogle ikke har angivet noget erhvervserfaring. Antal års erhvervserfaring bliver således 0 for alle dem, der ikke har svaret. En udfordring ved dette er imidlertid, at vi ikke ved ikke om missing skyldes, at folk ikke har haft et job, eller de bare har været for dovne til at skrive det ind. Vi omkoder derfor disse variable, så de står som missing i stedet for 0. 
```{r, eval=FALSE}
#Koder kandidater uden angivet erhvervserfaring til missing.
aar_med_erfaring[aar_med_erfaring==0]<-NA

#Og fylde på
df98_15$erhv_akk_varighed[is.na(df98_15$erhv_akk_varighed)]<-aar_med_erfaring[is.na(df98_15$erhv_akk_varighed)]

mean(df98_15$erhv_akk_varighed[df98_15$valgt_15], na.rm=T)
mean(df98_15$erhv_akk_varighed[df98_15$valgt_11], na.rm=T)
mean(df98_15$erhv_akk_varighed[df98_15$valgt_07], na.rm=T)
mean(df98_15$erhv_akk_varighed[df98_15$valgt_05], na.rm=T)
mean(df98_15$erhv_akk_varighed[df98_15$vl_2001==1], na.rm=T)
mean(df98_15$erhv_akk_varighed[df98_15$vl_1998==1], na.rm=T)
```

#### Mål  2: Simpel fratrukket overlap, perioder uden slut er første indmeldelse
Et problem ved ovenstående er, at den giver en del missing - selv for dem, der har opgivet erhverv
```{r, eval=FALSE}
table(is.na(df98_15$erhv_01_start), is.na(df98_15$erhv_akk_varighed))
```

Dette skyldes, at flere af dem, der har opgivet starttidspunkt for deres erhverv, ikke har angivet noget sluttidspunkt. For at komme udenom dette sætter vi sluttidspunkt til at være første indvælgelse.

Vi laver variabel som første indmeldelse.
```{r, eval=FALSE}
# Merge fra DF_his på foedselsaar og fulde_navn
df_his98_2005_merge<-df_his%>%
  filter(vl_1998==1|vl_2001==1|vl_2005==1) %>%
  select(fulde_navn, foedselsaar, første_indtræden_dato, vl_1998)

df98_15_merge<-left_join(df98_15, df_his98_2005_merge,
          by=c("fulde_navn", "foedselsaar"),
          suffix=c("_scrape","_his"))

df98_15_merge$første_indtræden_dato<-df98_15_merge$første_indtræden_dato_scrape
df98_15_merge$første_indtræden_dato[is.na(df98_15_merge$første_indtræden_dato)]<-
  df98_15_merge$første_indtræden_dato_his[is.na(df98_15_merge$første_indtræden_dato)]

#Laver variablen
df98_15_merge$første_periode_start<-as.numeric(str_sub(df98_15_merge$første_indtræden_dato, 1, 4))
```

Vi sætter sluttid til første indmeldelse, hvor sluttid er missing
```{r, eval=FALSE}
ny_slut1<-!is.na(df98_15_merge$erhv_01_start)&is.na(df98_15_merge$erhv_01_slut)
ny_slut2<-!is.na(df98_15_merge$erhv_02_start)&is.na(df98_15_merge$erhv_02_slut)
ny_slut3<-!is.na(df98_15_merge$erhv_03_start)&is.na(df98_15_merge$erhv_03_slut)
ny_slut4<-!is.na(df98_15_merge$erhv_04_start)&is.na(df98_15_merge$erhv_04_slut)
ny_slut5<-!is.na(df98_15_merge$erhv_05_start)&is.na(df98_15_merge$erhv_05_slut)
ny_slut6<-!is.na(df98_15_merge$erhv_06_start)&is.na(df98_15_merge$erhv_06_slut)
ny_slut7<-!is.na(df98_15_merge$erhv_07_start)&is.na(df98_15_merge$erhv_07_slut)
ny_slut8<-!is.na(df98_15_merge$erhv_08_start)&is.na(df98_15_merge$erhv_08_slut)
ny_slut9<-!is.na(df98_15_merge$erhv_09_start)&is.na(df98_15_merge$erhv_09_slut)
ny_slut10<-!is.na(df98_15_merge$erhv_10_start)&is.na(df98_15_merge$erhv_10_slut)

df98_15_merge$erhv_01_slut2<-df98_15_merge$erhv_01_slut
df98_15_merge$erhv_02_slut2<-df98_15_merge$erhv_02_slut
df98_15_merge$erhv_03_slut2<-df98_15_merge$erhv_03_slut
df98_15_merge$erhv_04_slut2<-df98_15_merge$erhv_04_slut
df98_15_merge$erhv_05_slut2<-df98_15_merge$erhv_05_slut
df98_15_merge$erhv_06_slut2<-df98_15_merge$erhv_06_slut
df98_15_merge$erhv_07_slut2<-df98_15_merge$erhv_07_slut
df98_15_merge$erhv_08_slut2<-df98_15_merge$erhv_08_slut
df98_15_merge$erhv_09_slut2<-df98_15_merge$erhv_09_slut
df98_15_merge$erhv_10_slut2<-df98_15_merge$erhv_10_slut

df98_15_merge$erhv_01_slut2[ny_slut1]<-df98_15_merge$første_periode_start[ny_slut1]
df98_15_merge$erhv_02_slut2[ny_slut2]<-df98_15_merge$første_periode_start[ny_slut2]
df98_15_merge$erhv_03_slut2[ny_slut3]<-df98_15_merge$første_periode_start[ny_slut3]
df98_15_merge$erhv_04_slut2[ny_slut4]<-df98_15_merge$første_periode_start[ny_slut4]
df98_15_merge$erhv_05_slut2[ny_slut5]<-df98_15_merge$første_periode_start[ny_slut5]
df98_15_merge$erhv_06_slut2[ny_slut6]<-df98_15_merge$første_periode_start[ny_slut6]
df98_15_merge$erhv_07_slut2[ny_slut7]<-df98_15_merge$første_periode_start[ny_slut7]
df98_15_merge$erhv_08_slut2[ny_slut8]<-df98_15_merge$første_periode_start[ny_slut8]
df98_15_merge$erhv_09_slut2[ny_slut9]<-df98_15_merge$første_periode_start[ny_slut9]
df98_15_merge$erhv_10_slut2[ny_slut10]<-df98_15_merge$første_periode_start[ny_slut10]
```

Vi tager højde for overlap i erhvervserfaring, så vi ikke regner dobbelt for dem, der har haft mere end et arbejde.
```{r, eval=FALSE}
overlap_list<-vector("list", length = nrow(df98_15))

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_01_start)&!is.na(df98_15_merge$erhv_01_slut2)]){
  overlap_list[[i]]<-seq(as.numeric(df98_15_merge$erhv_01_start)[i],as.numeric(df98_15_merge$erhv_01_slut2)[i])
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_02_start)&!is.na(df98_15_merge$erhv_02_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_02_start)[i],as.numeric(df98_15_merge$erhv_02_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_03_start)&!is.na(df98_15_merge$erhv_03_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_03_start)[i],as.numeric(df98_15_merge$erhv_03_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_04_start)&!is.na(df98_15_merge$erhv_04_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_04_start)[i],as.numeric(df98_15_merge$erhv_04_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_05_start)&!is.na(df98_15_merge$erhv_05_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_05_start)[i],as.numeric(df98_15_merge$erhv_05_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_06_start)&!is.na(df98_15_merge$erhv_06_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_06_start)[i],as.numeric(df98_15_merge$erhv_06_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_07_start)&!is.na(df98_15_merge$erhv_07_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_07_start)[i],as.numeric(df98_15_merge$erhv_07_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_08_start)&!is.na(df98_15_merge$erhv_08_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_08_start)[i],as.numeric(df98_15_merge$erhv_08_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_09_start)&!is.na(df98_15_merge$erhv_09_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_09_start)[i],as.numeric(df98_15_merge$erhv_09_slut2)[i]))
}

for (i in df98_15_merge$indeks[!is.na(df98_15_merge$erhv_10_start)&!is.na(df98_15_merge$erhv_10_slut2)]){
  overlap_list[[i]]<-c(overlap_list[[i]],seq(as.numeric(df98_15_merge$erhv_10_start)[i],as.numeric(df98_15_merge$erhv_10_slut2)[i]))
}

#Laver en vector
aar_med_erfaring2<-NA

for (i in 1:length(overlap_list)){
  aar_med_erfaring2[i]<-length(unique(overlap_list[[i]]))
}

aar_med_erfaring2[aar_med_erfaring2==0]<-NA

#Og fylde på
df98_15_merge$erhv_akk_varighed2[is.na(df98_15_merge$erhv_akk_varighed2)]<-aar_med_erfaring2[is.na(df98_15_merge$erhv_akk_varighed2)]

sum(is.na(df98_15_merge$erhv_akk_varighed2))
sum(is.na(df98_15_merge$erhv_akk_varighed))


mean(df98_15_merge$erhv_akk_varighed2[df98_15$valgt_15], na.rm=T)
mean(df98_15_merge$erhv_akk_varighed2[df98_15$valgt_11], na.rm=T)
mean(df98_15_merge$erhv_akk_varighed2[df98_15$valgt_07], na.rm=T)
mean(df98_15_merge$erhv_akk_varighed2[df98_15$valgt_05], na.rm=T)
mean(df98_15_merge$erhv_akk_varighed2[df98_15$vl_2001==1], na.rm=T)
mean(df98_15_merge$erhv_akk_varighed2[df98_15$vl_1998==1], na.rm=T)


sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$valgt_15]))
sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$valgt_11]))
sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$valgt_07]))
sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$valgt_05]))
sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$vl_2001==1]))
sum(!is.na(df98_15_merge$erhv_akk_varighed2[df98_15_merge$vl_1998==1]))
```

## Rensning af parti (1998-2015) 
```{r, eval=FALSE}
df98_15_merge$parti[df98_15_merge$parti=="KF"]<-"K"
df98_15_merge$parti[df98_15_merge$parti=="RV"]<-"R"
df98_15_merge$parti[df98_15_merge$parti=="F"]<-"DF"

df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Centrum Demokraterne"] <- "CD"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Dansk Folkeparti"] <- "DF"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Nationalliberale/højre/konservative folkeparti"] <- "K"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Enhedslisten"] <- "EL"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Kristeligt Folkeparti"] <- "KD"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Radikale venstre"] <- "R"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Socialistisk Folkeparti"] <- "SF"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Venstre Socialisterne"] <- "VS"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Fremskridtspartiet"] <- "FP"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Socialdemokratiet"] <- "S"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_v_indtræden=="Venstre"] <- "V"

df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(rv)"] <- "RV"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(s)"] <- "S"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(v)"] <- "V"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(df)"] <- "DF"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(kf)"] <- "K"
df98_15_merge$parti[is.na(df98_15_merge$parti)&df98_15_merge$parti_forkortelser=="(sf)"] <- "S"
```

Vi frasorterer partier, som ikke er danske
```{r, eval=FALSE}
df98_15_merge_DK <- df98_15_merge %>%
  filter(parti!="SIU" & parti!="TF" & parti!="JF" & parti!="IA" & navn_merge!= "Edmund Joensen" )
```
