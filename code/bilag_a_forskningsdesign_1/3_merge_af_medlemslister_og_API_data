## Merge af medlemslister og API-data
Følgende har til formål at merge af medlemslister og API-data, samt indhentning af missing-værdier direkte fra Folketingets hjemmeside (2005-2015)
Vi indlæser de nødvendige pakker
```{r, message=F, warning=FALSE, eval=FALSE}
library(httr) # Kan tilgå api'en
library(urltools) #Lave url'er
library(dplyr) # Kan rense det nye data
library(rebus) # En mere intuitiv syntaks til "regular expressions"
library(stringr) # Til arbejde med string-data
library(ggplot2) # Til visualisering af resultater
library(rvest) # Kan scrape web-data
library(openxlsx) # Kan loade og gemme excel
```

Vi indlæser data indhentet igennem Folketingets API
```{r, eval=FALSE}
#Indlæser data
df_medlemmer<-readRDS(file="...data")

# Tjek efter dubletter
nrow(duplicated(df_medlemmer)) ## Hele data
sum(duplicated(df_medlemmer$navn)) # Kun navnevariablen
```

Vi indlæser data indhentet fra Wikipedia (medlemslister). Dette gør vi for at undersøge, hvem der er valgt pr. 2007, 2011 og 2015
```{r, eval=FALSE}
#Indlæser data over medlemslister
medlemmer_2007_2015<-readRDS("...data")
```

Vi kombinerer de to datasæt: API-data og listen over medlemmer fra Wikipedia
```{r, eval=FALSE}
df_medlemmer_07_15<-left_join(medlemmer_2007_2015, df_medlemmer, by="navn")
```

Vi tjekker for eventuelle kandidater med manglende profiler (dvs. kandidater, der ikke havde tilgængelig information på Folketingets API). Det giver især en del missing fra 2007.
```{r, eval=FALSE}
#Overblik over missing
table(df_medlemmer_07_15$navn[is.na(df_medlemmer_07_15$biografi)],df_medlemmer_07_15$valgt_07[is.na(df_medlemmer_07_15$biografi)])

#Vi laver en missing-variabel
df_medlemmer_07_15$skal.scrapes<-is.na(df_medlemmer_07_15$biografi)
```

Nogle af de kandidater, hvor der mangler information, skyldes at navnene er skrevet forskellige i de to datasæt. Det drejer sig om følgende medlemmer:
```{r, eval=FALSE}
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Simon Emil Ammitzbøll"]<-"Simon Emil Ammitzbøll-Bille"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="May-Britt Buch-Kattrup"]<-"May-Britt Kattrup"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Hans Kristian Bundgaard-Skibby"]<-"Hans Kristian Skibby"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Peter Juel Jensen"]<-"Peter Juel-Jensen"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Roger Matthisen"]<-"Roger Courage Matthisen"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Søren Pape"]<-"Søren Pape Poulsen"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Peter Kofod Poulsen"]<-"Peter Kofod"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Ane Halsboe-Larsen"]<-"Ane Halsboe-Jørgensen"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Marlene Lorentzen"]<-"Marlene Borst Hansen"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Mette Dencker"]<-"Mette Hjermind Dencker"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Morten Marinus Jørgensen"]<-"Morten Marinus"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Karina Lorentzen"]<-"Karina Lorentzen Dehnhardt"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Karen Klint"]<-"Karen J. Klint"
medlemmer_2007_2015$navn[medlemmer_2007_2015$navn=="Karl Bornhøft"]<-"Karl H. Bornhøft"
```

For de kandidater, der er missing indhenter vi deres profiler direkte fra Folketingets hjemmeside.
For at kunne gøre dette laver vi en liste med URL'er. URL'erne består af en base-url og child-url. Her findes navn og partiforkortelse i parantes sepereret med "-".
```{r, eval=FALSE}
#Navnevektor
names_vec<-df_medlemmer_07_15$navn[is.na(df_medlemmer_07_15$biografi)]
names_vec<-str_replace_all(names_vec, " ", "-")

##Nogle medlemmer har en underlig url
names_vec[names_vec=="Christian-H.-Hansen"]<-"christian-h,-d-,-hansen" #Ændrer navn
names_vec[names_vec=="Johannes-Poulsen"] <- "johs,-d-,-poulsen" #Ændrer navn
names_vec[names_vec=="Nanna-Westerby-Jensen"]<-"Nanna-Westerby" #Ændrer navn

#Partivektor
parti_vec<-df_medlemmer_07_15$parti[is.na(df_medlemmer_07_15$biografi)]

##R skal hedde RV og K skal hedde KF
parti_vec[parti_vec=="R"]<-"RV"
parti_vec[parti_vec=="K"]<-"KF"
parti_vec[parti_vec=="F"]<-"UFG"
parti_vec[parti_vec=="SIU"]<-"SI"

parti_vec<-paste0("(",parti_vec,")")

# Samler søgestrenge
search_string_vec<-paste(names_vec, parti_vec, sep="-")
search_string_url<-url_encode(search_string_vec)

url_vec <- paste0("https://www.ft.dk/da/medlemmer/folketingetsmedlemmer/",search_string_url)

# Laver pausevektor mellem datasæt
sleep_vec <- runif(n = length(url_vec), 
      min = 8, 
      max = 12)
```

Vi laver en short bio-variabel for de scrapede profiler.
```{r, eval=FALSE}
df_medlemmer_07_15$bio_short<-NA
  w<-lapply(c, `[`, 1) #Trækker første element
  w<-unlist(lapply(w, html_text))

df_medlemmer_07_15$bio_short[is.na(df_medlemmer_07_15$biografi)]<-w
```

Vi laver en uddannelses/erhvervs-bio-variabel for de scrapede profiler.
```{r, eval=FALSE}
length(c)

q<-lapply(c,str_detect, ">Uddannelse og erhverv<")

d<-list()

#Laver en liste med udd og erhvervsbios
for (i in 1:length(c)){
  d[[i]]<-c[[i]][q[[i]]]
}

#Gør den til to elementer (udd og erhverv)
e<-lapply(d, str_split, "<br><br>")

udd_vec<-1
for (i in 1:length(c)){
  tryCatch({
  udd_vec[i]<-e[[i]][[1]][1]
}, error=function(t){cat("ERROR :",conditionMessage(t),"\n")})
}

erhv_vec<-1
for (i in 1:length(c)){
  tryCatch({
  erhv_vec[i]<-e[[i]][[1]][2]
}, error=function(t){cat("ERROR :",conditionMessage(t),"\n")})
}


df_medlemmer_07_15$udd_bio[is.na(df_medlemmer_07_15$biografi)]<-udd_vec
df_medlemmer_07_15$erhv_bio[is.na(df_medlemmer_07_15$biografi)]<-erhv_vec
```

Vi laver en medlemsperiode-bio-variabel for de scrapede profiler.
```{r, eval=FALSE}
length(c)

q<-lapply(c,str_detect, ">Medlemsperiode<")

d<-list()

#Laver en liste med udd og erhvervsbios
for (i in 1:length(c)){
  d[[i]]<-c[[i]][q[[i]]]
}

d<-unlist(lapply(d, html_text))

df_medlemmer_07_15$bio_medlem[is.na(df_medlemmer_07_15$biografi)]<-d

```

