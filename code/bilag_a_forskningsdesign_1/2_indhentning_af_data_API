
## Indhentning af data fra Folketingets Åbne Data (via API) fra 2005-2015
Folketingets Åbne Data er en web-service, der kan tilgås via en såkaldt Application Programming Interface (API). Vi har derfor kodet et program, der...

1. henter alle tilgængelige profiltekster for nuværende og tidligere folketingsmedlemmer fra Folketingets Åbne Data,
2. markerer hvilke folketingsvalg hver profil er blevet indvalgt i og
3. sorterer disse profiltekster i et overskueligt datasæt med medlemmets navn, partimedlemskab samt
medlemmets uddannelses- og erhvervshsitorik, herunder start- og sluttidspunkter for de forskellige punkter.

### Indsamling af data
I det følgende viser vi, hvordan vi indhenter medlemsdata fra Folketingets API til at dække perioden 2001-2015.

Først indlæses de nødvendige pakker
```{r, message=F, eval=FALSE}
library(httr) # Kan tilgå api'en
library(dplyr) # Kan rense det nye data
library(rebus) # En mere intuitiv syntaks til "regular expressions"
library(stringr) # Til arbejde med string-data
library(ggplot2) # Til visualisering af resultater
```

Medlemsdata fås lettest gennem Folketingets egen API. Selvom det data, der ligger i API'en, ikke altid er lige intuitivt, indeholder det profiltekster for alle nuværende og nyligt fratrådte medlemmer. Det data er interessant for os. 

#### Funktion til indhentning af medlemsdata
Vi tager udgangspunkt i en funktion udviklet af Bjørn Skeel i 2018 til indhentning af medlemsdata fra Folketingets API. Vi videreudvikler imidlertid denne med et par relevante parametre og tilføjer enkelte rettelser. Funktionen returnerer en data-frame fra Folketingets API ud fra fire parametre:

1. `data_unit`: Specificerer hvilken dataressource, man er interesseret i (fx Aktør).
2. `parameter_vector`: En character-vector med de variable, som man er interesseret i (fx c("navn", "biografi"). Funktionen tillader max at der indhentes 15 variable af gangen. 
3. `max_obs`: Et max-antal observationer, som man vil indhente. Den er især smart, hvis man skal hente dokumentdata, da der kan være rigtig mange. For aktørdata er den sjældent relevant
4. `filter_equal` eller `filter_contain`: Et søgefilter, hvor man kan specificere at en variabel skal være lig med eller indeholde en given værdi. 

Vi sætter funktionen op.
```{r, eval=FALSE}
collect_ft_data <- function(data_unit, parameter_vector, max_obs, filter_equal=NULL, filter_contain=NULL){

# Omskriv filteret til URL-formatering, hvis et filter specificeres. reserved=T koder også specialtegn
  if (length(filter_equal)>1){
    chr.filter <- c("&$filter=", URLencode(filter_equal[1], reserved=T),"%20eq%20",URLencode(filter_equal[2], reserved=T))
  } else if (length(filter_contain)>1){
    chr.filter <- c("&$filter=substringof('", URLencode(filter_contain[2], reserved=T),"',", URLencode(filter_contain[1], reserved=T),")")
  } else {
    chr.filter <- NULL
  }
  
  # Sammensæt den nye filter-url
  filter_url <- paste(chr.filter, collapse="")
  
  # Sammensæt den grundlæggende url
  url_basic <- paste0("https://oda.ft.dk/api/", URLencode(data_unit), "?$inlinecount=allpages")
  
  # Kombiner den nye filter-url med den samlede url
  full_url <- paste0(url_basic, filter_url, collapse="")
  
  # Foretager en GET-request til api'en
  data_page <- GET(full_url)
  data_content <- content(data_page) # Trækker indhold fra data_page
  num_obs <- data_content$odata.count # Tæller antal observationer
  print(paste0("The dataset has ", num_obs, " observations"))
  
  # Sætter en tom dataframe op
  df <- data.frame(NA) # Laver en 1x1 df med NA's
  for (i in parameter_vector){df[,i] <- NA} # Sætter en kolonne op for hvert parameter man har specificeret
  df <- df[-1] #Fjerner den første tomme variabel
  
  # Specificer det antal observationer, som funktionen skal indsamle 
  if(missing(max_obs)) {
    obs_collect <- num_obs # Default er alle de fundne observationer
  } else {
    obs_collect <- max_obs # Hvis man har specificeret noget, så tager den kun det antal obs
  }
  
  # Indsamler data med det valgte antal variable og observationer
  seqnr <- seq(from=0, to=obs_collect, by=20) # Udregn hvor mange kald der skal laves (20 obs for hver side). 
  
  # For hvert kald skal funktionen trække sidens values
  for(i in seqnr) {
    link <- paste0(full_url,"&$skip=",i) #Skip specificerer antal obs vi allerede har trukket
    data.temp <- GET(link)
    data.temp.content <- content(data.temp)
    values = data.temp.content$value #Tag kun values elementer fra den trukne indholdsliste
    
    # For hver observation på siden, skal values sættes ind i DF
    for(j in 1:length(values)) { #For hver observation på den nuværende side..
      df[i + j,] <- c(values[[j]][[parameter_vector[1]]], #  .. gemmes værdier i data-frame
                      values[[j]][[parameter_vector[2]]],
                      values[[j]][[parameter_vector[3]]],
                      values[[j]][[parameter_vector[4]]],
                      values[[j]][[parameter_vector[5]]],
                      values[[j]][[parameter_vector[6]]],
                      values[[j]][[parameter_vector[7]]],
                      values[[j]][[parameter_vector[8]]],
                      values[[j]][[parameter_vector[9]]],
                      values[[j]][[parameter_vector[10]]],
                      values[[j]][[parameter_vector[11]]],
                      values[[j]][[parameter_vector[12]]],
                      values[[j]][[parameter_vector[13]]],
                      values[[j]][[parameter_vector[14]]],
                      values[[j]][[parameter_vector[15]]])
    }}
  return(df) # Returner den udarbejde df
}
```

Kører funktionen og henter politikernes navn og biografi
``` {r, eval=FALSE}
df_medlemmer <- collect_ft_data(data_unit = "Aktør", 
                parameter_vector = c("navn", "biografi"),
                filter_contain = c("biografi","medlem")
                )
```
